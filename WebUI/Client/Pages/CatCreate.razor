@page "/admin/crear"
@inject HttpClient httpClient
@inject NavigationManager navManager

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>    
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Nombre" HelperText="Max. 8 characters"
                            @bind-Value="model.Name" For="@(() => model.Name)"/>
            <MudDatePicker Label="Fecha de nacimiento" @bind-Date="model.DateOfBirth" For="@(() => model.DateOfBirth)"/>
            <MudCheckBox Label="Esterilizado" @bind-Checked="@model.IsSterilized"></MudCheckBox>
            <MudCheckBox Label="Con chip" @bind-Checked="@model.HasChip"></MudCheckBox>
            <MudCheckBox Label="Vacunado" @bind-Checked="@model.IsVaccinated"></MudCheckBox>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Crear</MudButton>
        </MudCardActions>        
    </MudCard>    
</EditForm>
<MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="6">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    for="@context">
            Only image files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>
    @if (Images.Count > 0)
    {
        <MudList>
            @foreach (var file in Images)
            {
                <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                    @file.Name <code>@file.Size bytes</code>
                </MudListItem>
            }
        </MudList>
    }
@code {
    private CatBindingTarget model { get; set; } = new CatBindingTarget();
    private Cat savedCat { get; set; } = new Cat();
    private List<IBrowserFile> Images = new List<IBrowserFile>();

    private async Task UploadFiles(IBrowserFile file)
    {
        Images.Add(file);
        var buffer = new byte[file.Size];    
        await file.OpenReadStream().ReadAsync(buffer);
        var newPhoto = new CatPhoto()
        {
            Bytes = buffer,
            Description = file.Name,
            FileExtension = file.ContentType,
            Size = file.Size,
        };    
        // Add the photo instance to the list
        model.Photos.Add(newPhoto);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        /*foreach(var image in Images)
        {            
            if (image.Size > 0)
            {
                var buffer = new byte[image.Size];    
                await image.OpenReadStream().ReadAsync(buffer);
                var newPhoto = new CatPhoto()
                {
                    Bytes = buffer,
                    Description = image.Name,
                    FileExtension = image.ContentType,
                    Size = image.Size,
                };    
                // Add the photo instance to the list
                model.Photos.Add(newPhoto);
                
            }                   
        }*/
        //model.Files = Images;
        var response = await httpClient.PostAsJsonAsync("api/Cats", model);
        savedCat = await response.Content.ReadFromJsonAsync<Cat>() ?? new Cat();
        navManager.NavigateTo("admin/gatos");
    }

}