@page "/productos"
@inject HttpClient Http
@inject IJSRuntime jsr
@inject ICartService cartService

<PageTitle>Productos</PageTitle>

@if (ProductArray != null)
{
	<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));">
		@foreach (var product in ProductArray)
		{
			 
		
				<MudCard Style="width:200px">			
					<MudCarousel Class="mud-width-full rounded-top" Style="height:200px" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
						@foreach(var image in product.Photos){
							<MudCarouselItem Transition="Transition.Fade" Color="@Color.Primary">
							<div class="d-flex">
								<MudImage src="@GetImageSrc(image)" Style="object-fit:contain;width:100%;height:100%"></MudImage>
							</div>							
							</MudCarouselItem>
						}
					</MudCarousel>	
					<MudCardContent>
						<MudText Typo="Typo.h6">@product.Name</MudText>
						<MudText>@product.Price.ToString("c")</MudText>
						<MudText>@product.Description</MudText>
						<MudButton OnClick="@(async () => await AddItemToCart(product))">Comprar</MudButton>
					</MudCardContent>
				</MudCard>
		}
	</div>		
}



@code {

	public IEnumerable<Product>? ProductArray;
	[CascadingParameter]
	protected EventCallback ToggleEvent { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ProductArray = await Http.GetFromJsonAsync<IEnumerable<Product>>("/api/products");
	}

	public async Task AddItemToCart(Product product){
		await cartService.AddItem(product, 1);
		await ToggleEvent.InvokeAsync();
	}

	public string GetImageSrc(ProductPhoto image)
	{
		if (image != null && image.Bytes != null) return "data:image/jpeg;base64," + Convert.ToBase64String(image.Bytes);
		else return "";
	}

}